highlighter
  name: Squiggly
options
  regex: dotall ignorecase
templates
  default: {{ <span class="\class">\escape\text</span> }}
equates
    IDENT = '[\p{Alpha}$_][\p{Alpha}$_0-9]*'
    keywords = [
        'for', 'with', 'match', 'case', 'if', 'else', 'elsif', 'then', 'end', 'define', 'block', 'return', 'break', 'continue'
        ]
    builtin = [
        'abs', 'absURL', 'append', 'capitalize', 'ceil', 'compact', 'complement', 'contains', 'default', 'distinct',
        'drop', 'dropRight', 'emojify', 'fileExists', 'filter', 'filterNot', 'findRE', 'floor', 'format', 'head',
        'htmlEscape', 'intersect', 'isEmpty', 'join', 'last', 'length', 'lower', 'map', 'markdownify', 'max', 'min', 'nonEmpty', 'now',
        'newline_to_br', 'number', 'partial', 'prepend', 'print', 'println', 'querify', 'random', 'relURL', 'reverse',
        'remove', 'removeFirst', 'round', 'shuffle', 'slice', 'split', 'startsWith', 'substring', 'sum', 'tail', 'take',
        'symdiff', 'takeRight', 'time', 'toSeq', 'toString', 'trim', 'truncate', 'ltrim', 'rtrim', 'urlDecode',
        'urlEncode', 'union', 'unix', 'upper', 'urlize'
        ]
states
  root:
    &\S*?;                        => Name.Entity
    \<\!\[CDATA\[.*?\]\]\>        => Comment.Preproc
    <!--                          => Comment >comment
    <\?.*?\?>                     => Comment.Preproc
    <![^>]*>                      => Comment.Preproc
    (<)\s*(script)\s*             => (Punctuation Name.Tag) >script-content >tag
    (<)\s*(style)\s*              => (Punctuation Name.Tag) >style-content >tag
    (<)\s*([\w:.-]+)              => (Punctuation Name.Tag) >tag
    (<)\s*(/)\s*([\w:.-]+)\s*(>)  => (Punctuation Punctuation Name.Tag Punctuation)
    \{\{\s*//.*?}}                => Comment
    \{\{                          => Comment.Preproc >stag
  stag:
    \}\}                       => Comment.Preproc ^
    ({{ words(keywords) }})\b  => Keyword
    (true|false|null)\b        => Keyword.Constant
    ({{ words(builtin) }})\b   => Name.Builtin
    {{ IDENT }}                => Name.Variable
    "(\\\\|\\"|[^"])*"         => String.Double
    '(\\\\|\\'|[^'])*'         => String.Single
  comment:
    [^-]+  => Comment
    -->    => Comment ^
    -      => Comment
  tag:
    ([\w:-]+)\s*(=)\s*  => (Name.Attribute Operator) >attr
    [\w:-]+             => Name.Attribute
    (/?)\s*(>)          => (Punctuation Punctuation) ^
  script-content:
    (<)\s*(/)\s*(script)\s*(>)  => (Punctuation Punctuation Name.Tag Punctuation) ^
    .+?(?=<\s*/\s*script\s*>)   => [Javascript]
  style-content:
    (<)\s*(/)\s*(style)\s*(>)  => (Punctuation Punctuation Name.Tag Punctuation) ^
    .+?(?=<\s*/\s*style\s*>)   => [CSS]
  attr:
    ".*?"    => String ^
    '.*?'    => String ^
    [^\s>]+  => String ^