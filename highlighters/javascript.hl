highlighter
    name: JavaScript
    alias: js
    alias: javascript
options
    regex: dotall unicode multiline
templates
    default: {{ <span class="\class">\escape\text</span> }}
equates
    JS_IDENT = '[\p{Alpha}$_][\p{Alpha}$_0-9]*'
    operator = ['typeof', 'instanceof', 'in', 'void', 'delete', 'new']
    keyword = [
        'for', 'in', 'while', 'do', 'break', 'return', 'continue', 'switch', 'case', 'default', 'if', 'else',
        'throw', 'try', 'catch', 'finally', 'yield', 'await', 'async', 'this', 'of', 'static', 'export', 'import', 'debugger', 'extends', 'super'
        ]
    declaration = ['var', 'let', 'const', 'with', 'function', 'class']
    reserved = [
        'constructor', 'from', 'as', 'abstract', 'boolean', 'byte', 'char', 'class', 'const', 'debugger', 'double', 'enum', 'export',
        'extends', 'final', 'float', 'goto', 'implements', 'import', 'int', 'interface', 'long', 'native',
        'package', 'private', 'protected', 'public', 'short', 'static', 'super', 'synchronized', 'throws',
        'transient', 'volatile'
        ]
    builtin = [
        'Array', 'Boolean', 'Date', 'Error', 'Function', 'Math', 'netscape',
        'Number', 'Object', 'Packages', 'RegExp', 'String', 'Promise', 'Proxy', 'sun', 'decodeURI',
        'decodeURIComponent', 'encodeURI', 'encodeURIComponent',
        'Error', 'eval', 'isFinite', 'isNaN', 'isSafeInteger', 'parseFloat', 'parseInt',
        'document', 'this', 'window'
        ]
includes
    commentsandwhitespace:
        \s+ => Text
        <!-- => Comment
        /\*.*?\*/ => Comment.Multiline
        //.*?\n => Comment.Single
    root:
        \A#! ?/.*?\n => Comment.Hashbang  ## recognized by node.js
##        ^(?=\s|/|<!--) => Text >slashstartsregex
        include commentsandwhitespace

        # Numeric literals
        0[bB][01]+ => Number.Bin
        0[oO][0-7]+ => Number.Oct
        0[xX][0-9a-fA-F]+ => Number.Hex
        [0-9]+n => Number.Integer
        (\.[0-9]+|[0-9]+\.[0-9]*|[0-9]+)([eE][-+]?[0-9]+)? => Number.Float

        \.\.\.|=\> => Punctuation
        \+\+|--|~|\?\?=?|\?|:|\\(?=\n)|(<<|>>>?|==?|!=?|(?:\*\*|\|\||&&|[-<>+*%&|^/]))=? => Operator >slashstartsregex
        [{(\[;,] => Punctuation >slashstartsregex
        [})\].] => Punctuation

        ({{ words(operator) }})\b => Operator.Word >slashstartsregex
        ({{ words(keyword) }})\b => Keyword >slashstartsregex
        ({{ words(declaration) }})\b => Keyword.Declaration >slashstartsregex
        (var|let|with|function)\b => Keyword.Declaration >slashstartsregex
        ({{ words(reserved) }})\b => Keyword.Reserved
        (true|false|null|NaN|Infinity|undefined)\b => Keyword.Constant
        ({{ words(builtin) }})\b => Name.Builtin
        {{ JS_IDENT }} => Name.Other
        "(\\\\|\\"|[^"])*" => String.Double
        '(\\\\|\\'|[^'])*' => String.Single
        ` => String.Backtick >interp
states
    slashstartsregex:
        include commentsandwhitespace
        /(\\.|[^[/\\\n]|\[(\\.|[^\]\\\n])*])+/([gimuy]+\b|\B) => String.Regex ^
        (?=/) => Text ^>badregex
        => ^
    badregex:
        \n => Text ^
    root:
        include root
    interp:
        ` => String.Backtick ^
        \\\\ => String.Backtick
        \\` => String.Backtick
        \$\{ => String.Interpol >interp-inside
        \$ => String.Backtick
        [^`\\$]+ => String.Backtick
    interp-inside:
        ## TODO: should this include single-line comments and allow nesting strings?
        \} => String.Interpol ^
        include root